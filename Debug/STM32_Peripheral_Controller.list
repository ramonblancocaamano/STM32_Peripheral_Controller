
STM32_Peripheral_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e30  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001f3c  08001f3c  00002f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f68  08001f68  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f68  08001f68  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f68  08001f68  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f68  08001f68  00002f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f6c  08001f6c  00002f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001f70  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08001f7c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08001f7c  00003144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c0b  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000186a  00000000  00000000  0000bc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0000d4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000785  00000000  00000000  0000de70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ce1  00000000  00000000  0000e5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc13  00000000  00000000  000252d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000851e1  00000000  00000000  00030ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b60ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e0  00000000  00000000  000b6110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000b88f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f24 	.word	0x08001f24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001f24 	.word	0x08001f24

0800014c <main>:
#define I2C_CASE_ISO1H816G_POLARITY 0x03
#define I2C_CASE_ISO1H816G_LEVEL 0x04

uint8_t i2c_buff[10];

int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    SystemClock_Config();
 8000150:	f000 f81e 	bl	8000190 <SystemClock_Config>

    MX_GPIO_Init();
 8000154:	f000 f94c 	bl	80003f0 <MX_GPIO_Init>
    MX_ADC1_Init();
 8000158:	f000 f86a 	bl	8000230 <MX_ADC1_Init>
    MX_I2C1_Init();
 800015c:	f000 f8e4 	bl	8000328 <MX_I2C1_Init>
    MX_SPI1_Init();
 8000160:	f000 f910 	bl	8000384 <MX_SPI1_Init>
    MX_ADC2_Init();
 8000164:	f000 f8a2 	bl	80002ac <MX_ADC2_Init>

    while (1) {
        if (HAL_I2C_Master_Receive_IT(&hi2c1, I2C_ADDR << 1, i2c_buff,
 8000168:	230a      	movs	r3, #10
 800016a:	4a07      	ldr	r2, [pc, #28]	@ (8000188 <main+0x3c>)
 800016c:	21d0      	movs	r1, #208	@ 0xd0
 800016e:	4807      	ldr	r0, [pc, #28]	@ (800018c <main+0x40>)
 8000170:	f001 f8ce 	bl	8001310 <HAL_I2C_Master_Receive_IT>
 8000174:	4603      	mov	r3, r0
 8000176:	2b00      	cmp	r3, #0
 8000178:	d001      	beq.n	800017e <main+0x32>
                                      sizeof(i2c_buff)) != HAL_OK) {
            Error_Handler();
 800017a:	f000 f97f 	bl	800047c <Error_Handler>
        }

        HAL_Delay(1000);
 800017e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000182:	f000 fb13 	bl	80007ac <HAL_Delay>
        if (HAL_I2C_Master_Receive_IT(&hi2c1, I2C_ADDR << 1, i2c_buff,
 8000186:	e7ef      	b.n	8000168 <main+0x1c>
 8000188:	20000134 	.word	0x20000134
 800018c:	20000088 	.word	0x20000088

08000190 <SystemClock_Config>:
        default:
            break;
    }
}

void SystemClock_Config(void) {
 8000190:	b580      	push	{r7, lr}
 8000192:	b094      	sub	sp, #80	@ 0x50
 8000194:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800019a:	2228      	movs	r2, #40	@ 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f001 fe94 	bl	8001ecc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	f107 0314 	add.w	r3, r7, #20
 80001a8:	2200      	movs	r2, #0
 80001aa:	601a      	str	r2, [r3, #0]
 80001ac:	605a      	str	r2, [r3, #4]
 80001ae:	609a      	str	r2, [r3, #8]
 80001b0:	60da      	str	r2, [r3, #12]
 80001b2:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c0:	2302      	movs	r3, #2
 80001c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c4:	2301      	movs	r3, #1
 80001c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c8:	2310      	movs	r3, #16
 80001ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001cc:	2300      	movs	r3, #0
 80001ce:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80001d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001d4:	4618      	mov	r0, r3
 80001d6:	f001 f943 	bl	8001460 <HAL_RCC_OscConfig>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d001      	beq.n	80001e4 <SystemClock_Config+0x54>
        Error_Handler();
 80001e0:	f000 f94c 	bl	800047c <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80001e4:	230f      	movs	r3, #15
 80001e6:	617b      	str	r3, [r7, #20]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001e8:	2300      	movs	r3, #0
 80001ea:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 fbb0 	bl	8001964 <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x7e>
        Error_Handler();
 800020a:	f000 f937 	bl	800047c <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800020e:	2302      	movs	r3, #2
 8000210:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4618      	mov	r0, r3
 800021a:	f001 fd1d 	bl	8001c58 <HAL_RCCEx_PeriphCLKConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0x98>
        Error_Handler();
 8000224:	f000 f92a 	bl	800047c <Error_Handler>
    }
}
 8000228:	bf00      	nop
 800022a:	3750      	adds	r7, #80	@ 0x50
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}

08000230 <MX_ADC1_Init>:

static void MX_ADC1_Init(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]

    hadc1.Instance = ADC1;
 8000240:	4b18      	ldr	r3, [pc, #96]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000242:	4a19      	ldr	r2, [pc, #100]	@ (80002a8 <MX_ADC1_Init+0x78>)
 8000244:	601a      	str	r2, [r3, #0]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000246:	4b17      	ldr	r3, [pc, #92]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = DISABLE;
 800024c:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800024e:	2200      	movs	r2, #0
 8000250:	731a      	strb	r2, [r3, #12]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000252:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000254:	2200      	movs	r2, #0
 8000256:	751a      	strb	r2, [r3, #20]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000258:	4b12      	ldr	r3, [pc, #72]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800025a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800025e:	61da      	str	r2, [r3, #28]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000260:	4b10      	ldr	r3, [pc, #64]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	605a      	str	r2, [r3, #4]
    hadc1.Init.NbrOfConversion = 1;
 8000266:	4b0f      	ldr	r3, [pc, #60]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000268:	2201      	movs	r2, #1
 800026a:	611a      	str	r2, [r3, #16]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800026c:	480d      	ldr	r0, [pc, #52]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800026e:	f000 fac1 	bl	80007f4 <HAL_ADC_Init>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_ADC1_Init+0x4c>
        Error_Handler();
 8000278:	f000 f900 	bl	800047c <Error_Handler>
    }

    sConfig.Channel = ADC_CHANNEL_0;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000280:	2301      	movs	r3, #1
 8000282:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	4805      	ldr	r0, [pc, #20]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800028e:	f000 fb89 	bl	80009a4 <HAL_ADC_ConfigChannel>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_ADC1_Init+0x6c>
        Error_Handler();
 8000298:	f000 f8f0 	bl	800047c <Error_Handler>
    }
}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000028 	.word	0x20000028
 80002a8:	40012400 	.word	0x40012400

080002ac <MX_ADC2_Init>:

static void MX_ADC2_Init(void) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]

    hadc2.Instance = ADC2;
 80002bc:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <MX_ADC2_Init+0x74>)
 80002be:	4a19      	ldr	r2, [pc, #100]	@ (8000324 <MX_ADC2_Init+0x78>)
 80002c0:	601a      	str	r2, [r3, #0]
    hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002c2:	4b17      	ldr	r3, [pc, #92]	@ (8000320 <MX_ADC2_Init+0x74>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
    hadc2.Init.ContinuousConvMode = DISABLE;
 80002c8:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <MX_ADC2_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	731a      	strb	r2, [r3, #12]
    hadc2.Init.DiscontinuousConvMode = DISABLE;
 80002ce:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <MX_ADC2_Init+0x74>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	751a      	strb	r2, [r3, #20]
    hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002d4:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <MX_ADC2_Init+0x74>)
 80002d6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002da:	61da      	str	r2, [r3, #28]
    hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002dc:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <MX_ADC2_Init+0x74>)
 80002de:	2200      	movs	r2, #0
 80002e0:	605a      	str	r2, [r3, #4]
    hadc2.Init.NbrOfConversion = 1;
 80002e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <MX_ADC2_Init+0x74>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	611a      	str	r2, [r3, #16]
    if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80002e8:	480d      	ldr	r0, [pc, #52]	@ (8000320 <MX_ADC2_Init+0x74>)
 80002ea:	f000 fa83 	bl	80007f4 <HAL_ADC_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_ADC2_Init+0x4c>
        Error_Handler();
 80002f4:	f000 f8c2 	bl	800047c <Error_Handler>
    }

    sConfig.Channel = ADC_CHANNEL_1;
 80002f8:	2301      	movs	r3, #1
 80002fa:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80002fc:	2301      	movs	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	4619      	mov	r1, r3
 8000308:	4805      	ldr	r0, [pc, #20]	@ (8000320 <MX_ADC2_Init+0x74>)
 800030a:	f000 fb4b 	bl	80009a4 <HAL_ADC_ConfigChannel>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_ADC2_Init+0x6c>
        Error_Handler();
 8000314:	f000 f8b2 	bl	800047c <Error_Handler>
    }
}
 8000318:	bf00      	nop
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000058 	.word	0x20000058
 8000324:	40012800 	.word	0x40012800

08000328 <MX_I2C1_Init>:

static void MX_I2C1_Init(void) {
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 800032c:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <MX_I2C1_Init+0x50>)
 800032e:	4a13      	ldr	r2, [pc, #76]	@ (800037c <MX_I2C1_Init+0x54>)
 8000330:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8000332:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <MX_I2C1_Init+0x50>)
 8000334:	4a12      	ldr	r2, [pc, #72]	@ (8000380 <MX_I2C1_Init+0x58>)
 8000336:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000338:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <MX_I2C1_Init+0x50>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800033e:	4b0e      	ldr	r3, [pc, #56]	@ (8000378 <MX_I2C1_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000344:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <MX_I2C1_Init+0x50>)
 8000346:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800034a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800034c:	4b0a      	ldr	r3, [pc, #40]	@ (8000378 <MX_I2C1_Init+0x50>)
 800034e:	2200      	movs	r2, #0
 8000350:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000352:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <MX_I2C1_Init+0x50>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000358:	4b07      	ldr	r3, [pc, #28]	@ (8000378 <MX_I2C1_Init+0x50>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800035e:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <MX_I2C1_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000364:	4804      	ldr	r0, [pc, #16]	@ (8000378 <MX_I2C1_Init+0x50>)
 8000366:	f000 fe8f 	bl	8001088 <HAL_I2C_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8000370:	f000 f884 	bl	800047c <Error_Handler>
    }
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000088 	.word	0x20000088
 800037c:	40005400 	.word	0x40005400
 8000380:	000186a0 	.word	0x000186a0

08000384 <MX_SPI1_Init>:

static void MX_SPI1_Init(void) {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 8000388:	4b17      	ldr	r3, [pc, #92]	@ (80003e8 <MX_SPI1_Init+0x64>)
 800038a:	4a18      	ldr	r2, [pc, #96]	@ (80003ec <MX_SPI1_Init+0x68>)
 800038c:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800038e:	4b16      	ldr	r3, [pc, #88]	@ (80003e8 <MX_SPI1_Init+0x64>)
 8000390:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000394:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000396:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <MX_SPI1_Init+0x64>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800039c:	4b12      	ldr	r3, [pc, #72]	@ (80003e8 <MX_SPI1_Init+0x64>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003a2:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <MX_SPI1_Init+0x64>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <MX_SPI1_Init+0x64>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	@ (80003e8 <MX_SPI1_Init+0x64>)
 80003b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003b4:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003b6:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <MX_SPI1_Init+0x64>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003bc:	4b0a      	ldr	r3, [pc, #40]	@ (80003e8 <MX_SPI1_Init+0x64>)
 80003be:	2200      	movs	r2, #0
 80003c0:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c2:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <MX_SPI1_Init+0x64>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003c8:	4b07      	ldr	r3, [pc, #28]	@ (80003e8 <MX_SPI1_Init+0x64>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 80003ce:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <MX_SPI1_Init+0x64>)
 80003d0:	220a      	movs	r2, #10
 80003d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80003d4:	4804      	ldr	r0, [pc, #16]	@ (80003e8 <MX_SPI1_Init+0x64>)
 80003d6:	f001 fcf5 	bl	8001dc4 <HAL_SPI_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_SPI1_Init+0x60>
        Error_Handler();
 80003e0:	f000 f84c 	bl	800047c <Error_Handler>
    }
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	200000dc 	.word	0x200000dc
 80003ec:	40013000 	.word	0x40013000

080003f0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	f107 0308 	add.w	r3, r7, #8
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b1a      	ldr	r3, [pc, #104]	@ (8000470 <MX_GPIO_Init+0x80>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a19      	ldr	r2, [pc, #100]	@ (8000470 <MX_GPIO_Init+0x80>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <MX_GPIO_Init+0x80>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800041c:	4b14      	ldr	r3, [pc, #80]	@ (8000470 <MX_GPIO_Init+0x80>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a13      	ldr	r2, [pc, #76]	@ (8000470 <MX_GPIO_Init+0x80>)
 8000422:	f043 0308 	orr.w	r3, r3, #8
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <MX_GPIO_Init+0x80>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0308 	and.w	r3, r3, #8
 8000430:	603b      	str	r3, [r7, #0]
 8000432:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = IN_7_Pin | IN_6_Pin;
 8000434:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000438:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000442:	f107 0308 	add.w	r3, r7, #8
 8000446:	4619      	mov	r1, r3
 8000448:	480a      	ldr	r0, [pc, #40]	@ (8000474 <MX_GPIO_Init+0x84>)
 800044a:	f000 fc99 	bl	8000d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin =
 800044e:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8000452:	60bb      	str	r3, [r7, #8]
        IN_5_Pin | IN_4_Pin | IN_3_Pin | IN_2_Pin | IN_1_Pin | IN_0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000454:	2300      	movs	r3, #0
 8000456:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045c:	f107 0308 	add.w	r3, r7, #8
 8000460:	4619      	mov	r1, r3
 8000462:	4805      	ldr	r0, [pc, #20]	@ (8000478 <MX_GPIO_Init+0x88>)
 8000464:	f000 fc8c 	bl	8000d80 <HAL_GPIO_Init>
}
 8000468:	bf00      	nop
 800046a:	3718      	adds	r7, #24
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40021000 	.word	0x40021000
 8000474:	40010c00 	.word	0x40010c00
 8000478:	40010800 	.word	0x40010800

0800047c <Error_Handler>:

void Error_Handler(void) {
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
}
 8000482:	bf00      	nop
    __disable_irq();
    while (1) {
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <Error_Handler+0x8>

08000488 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	@ 0x28
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	f107 0318 	add.w	r3, r7, #24
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a28      	ldr	r2, [pc, #160]	@ (8000544 <HAL_ADC_MspInit+0xbc>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d122      	bne.n	80004ee <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004a8:	4b27      	ldr	r3, [pc, #156]	@ (8000548 <HAL_ADC_MspInit+0xc0>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a26      	ldr	r2, [pc, #152]	@ (8000548 <HAL_ADC_MspInit+0xc0>)
 80004ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b24      	ldr	r3, [pc, #144]	@ (8000548 <HAL_ADC_MspInit+0xc0>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80004bc:	617b      	str	r3, [r7, #20]
 80004be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	4b21      	ldr	r3, [pc, #132]	@ (8000548 <HAL_ADC_MspInit+0xc0>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a20      	ldr	r2, [pc, #128]	@ (8000548 <HAL_ADC_MspInit+0xc0>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000548 <HAL_ADC_MspInit+0xc0>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0304 	and.w	r3, r3, #4
 80004d4:	613b      	str	r3, [r7, #16]
 80004d6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004d8:	2301      	movs	r3, #1
 80004da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004dc:	2303      	movs	r3, #3
 80004de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e0:	f107 0318 	add.w	r3, r7, #24
 80004e4:	4619      	mov	r1, r3
 80004e6:	4819      	ldr	r0, [pc, #100]	@ (800054c <HAL_ADC_MspInit+0xc4>)
 80004e8:	f000 fc4a 	bl	8000d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80004ec:	e026      	b.n	800053c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a17      	ldr	r2, [pc, #92]	@ (8000550 <HAL_ADC_MspInit+0xc8>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d121      	bne.n	800053c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80004f8:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <HAL_ADC_MspInit+0xc0>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a12      	ldr	r2, [pc, #72]	@ (8000548 <HAL_ADC_MspInit+0xc0>)
 80004fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <HAL_ADC_MspInit+0xc0>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b0d      	ldr	r3, [pc, #52]	@ (8000548 <HAL_ADC_MspInit+0xc0>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a0c      	ldr	r2, [pc, #48]	@ (8000548 <HAL_ADC_MspInit+0xc0>)
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <HAL_ADC_MspInit+0xc0>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000528:	2302      	movs	r3, #2
 800052a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800052c:	2303      	movs	r3, #3
 800052e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0318 	add.w	r3, r7, #24
 8000534:	4619      	mov	r1, r3
 8000536:	4805      	ldr	r0, [pc, #20]	@ (800054c <HAL_ADC_MspInit+0xc4>)
 8000538:	f000 fc22 	bl	8000d80 <HAL_GPIO_Init>
}
 800053c:	bf00      	nop
 800053e:	3728      	adds	r7, #40	@ 0x28
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40012400 	.word	0x40012400
 8000548:	40021000 	.word	0x40021000
 800054c:	40010800 	.word	0x40010800
 8000550:	40012800 	.word	0x40012800

08000554 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a15      	ldr	r2, [pc, #84]	@ (80005c4 <HAL_I2C_MspInit+0x70>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d123      	bne.n	80005bc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000574:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <HAL_I2C_MspInit+0x74>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a13      	ldr	r2, [pc, #76]	@ (80005c8 <HAL_I2C_MspInit+0x74>)
 800057a:	f043 0308 	orr.w	r3, r3, #8
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <HAL_I2C_MspInit+0x74>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0308 	and.w	r3, r3, #8
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800058c:	23c0      	movs	r3, #192	@ 0xc0
 800058e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000590:	2312      	movs	r3, #18
 8000592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000594:	2303      	movs	r3, #3
 8000596:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	4619      	mov	r1, r3
 800059e:	480b      	ldr	r0, [pc, #44]	@ (80005cc <HAL_I2C_MspInit+0x78>)
 80005a0:	f000 fbee 	bl	8000d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005a4:	4b08      	ldr	r3, [pc, #32]	@ (80005c8 <HAL_I2C_MspInit+0x74>)
 80005a6:	69db      	ldr	r3, [r3, #28]
 80005a8:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <HAL_I2C_MspInit+0x74>)
 80005aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005ae:	61d3      	str	r3, [r2, #28]
 80005b0:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <HAL_I2C_MspInit+0x74>)
 80005b2:	69db      	ldr	r3, [r3, #28]
 80005b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40005400 	.word	0x40005400
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010c00 	.word	0x40010c00

080005d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000658 <HAL_SPI_MspInit+0x88>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d12f      	bne.n	8000650 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005f0:	4b1a      	ldr	r3, [pc, #104]	@ (800065c <HAL_SPI_MspInit+0x8c>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a19      	ldr	r2, [pc, #100]	@ (800065c <HAL_SPI_MspInit+0x8c>)
 80005f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b17      	ldr	r3, [pc, #92]	@ (800065c <HAL_SPI_MspInit+0x8c>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b14      	ldr	r3, [pc, #80]	@ (800065c <HAL_SPI_MspInit+0x8c>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a13      	ldr	r2, [pc, #76]	@ (800065c <HAL_SPI_MspInit+0x8c>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b11      	ldr	r3, [pc, #68]	@ (800065c <HAL_SPI_MspInit+0x8c>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000620:	23b0      	movs	r3, #176	@ 0xb0
 8000622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	480b      	ldr	r0, [pc, #44]	@ (8000660 <HAL_SPI_MspInit+0x90>)
 8000634:	f000 fba4 	bl	8000d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000638:	2340      	movs	r3, #64	@ 0x40
 800063a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	4619      	mov	r1, r3
 800064a:	4805      	ldr	r0, [pc, #20]	@ (8000660 <HAL_SPI_MspInit+0x90>)
 800064c:	f000 fb98 	bl	8000d80 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40013000 	.word	0x40013000
 800065c:	40021000 	.word	0x40021000
 8000660:	40010800 	.word	0x40010800

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <NMI_Handler+0x4>

0800066c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <HardFault_Handler+0x4>

08000674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <MemManage_Handler+0x4>

0800067c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <BusFault_Handler+0x4>

08000684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <UsageFault_Handler+0x4>

0800068c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b4:	f000 f85e 	bl	8000774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}

080006bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006c8:	f7ff fff8 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480b      	ldr	r0, [pc, #44]	@ (80006fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006ce:	490c      	ldr	r1, [pc, #48]	@ (8000700 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000704 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a09      	ldr	r2, [pc, #36]	@ (8000708 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006e4:	4c09      	ldr	r4, [pc, #36]	@ (800070c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006f2:	f001 fbf3 	bl	8001edc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f7ff fd29 	bl	800014c <main>
  bx lr
 80006fa:	4770      	bx	lr
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000700:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000704:	08001f70 	.word	0x08001f70
  ldr r2, =_sbss
 8000708:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800070c:	20000144 	.word	0x20000144

08000710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_2_IRQHandler>
	...

08000714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <HAL_InitTick+0x54>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <HAL_InitTick+0x58>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800072a:	fbb3 f3f1 	udiv	r3, r3, r1
 800072e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fb18 	bl	8000d68 <HAL_SYSTICK_Config>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e00e      	b.n	8000760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b0f      	cmp	r3, #15
 8000746:	d80a      	bhi.n	800075e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000748:	2200      	movs	r2, #0
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000750:	f000 faee 	bl	8000d30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000754:	4a06      	ldr	r2, [pc, #24]	@ (8000770 <HAL_InitTick+0x5c>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800075a:	2300      	movs	r3, #0
 800075c:	e000      	b.n	8000760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000000 	.word	0x20000000
 800076c:	20000008 	.word	0x20000008
 8000770:	20000004 	.word	0x20000004

08000774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000778:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <HAL_IncTick+0x1c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <HAL_IncTick+0x20>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a03      	ldr	r2, [pc, #12]	@ (8000794 <HAL_IncTick+0x20>)
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	20000008 	.word	0x20000008
 8000794:	20000140 	.word	0x20000140

08000798 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return uwTick;
 800079c:	4b02      	ldr	r3, [pc, #8]	@ (80007a8 <HAL_GetTick+0x10>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	20000140 	.word	0x20000140

080007ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b4:	f7ff fff0 	bl	8000798 <HAL_GetTick>
 80007b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80007c4:	d005      	beq.n	80007d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c6:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <HAL_Delay+0x44>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	4413      	add	r3, r2
 80007d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007d2:	bf00      	nop
 80007d4:	f7ff ffe0 	bl	8000798 <HAL_GetTick>
 80007d8:	4602      	mov	r2, r0
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d8f7      	bhi.n	80007d4 <HAL_Delay+0x28>
  {
  }
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000008 	.word	0x20000008

080007f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007fc:	2300      	movs	r3, #0
 80007fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d101      	bne.n	8000816 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	e0be      	b.n	8000994 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000820:	2b00      	cmp	r3, #0
 8000822:	d109      	bne.n	8000838 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff fe28 	bl	8000488 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f000 f9ab 	bl	8000b94 <ADC_ConversionStop_Disable>
 800083e:	4603      	mov	r3, r0
 8000840:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000846:	f003 0310 	and.w	r3, r3, #16
 800084a:	2b00      	cmp	r3, #0
 800084c:	f040 8099 	bne.w	8000982 <HAL_ADC_Init+0x18e>
 8000850:	7dfb      	ldrb	r3, [r7, #23]
 8000852:	2b00      	cmp	r3, #0
 8000854:	f040 8095 	bne.w	8000982 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800085c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000860:	f023 0302 	bic.w	r3, r3, #2
 8000864:	f043 0202 	orr.w	r2, r3, #2
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000874:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7b1b      	ldrb	r3, [r3, #12]
 800087a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800087c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	4313      	orrs	r3, r2
 8000882:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800088c:	d003      	beq.n	8000896 <HAL_ADC_Init+0xa2>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d102      	bne.n	800089c <HAL_ADC_Init+0xa8>
 8000896:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800089a:	e000      	b.n	800089e <HAL_ADC_Init+0xaa>
 800089c:	2300      	movs	r3, #0
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	7d1b      	ldrb	r3, [r3, #20]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d119      	bne.n	80008e0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	7b1b      	ldrb	r3, [r3, #12]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d109      	bne.n	80008c8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	035a      	lsls	r2, r3, #13
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	4313      	orrs	r3, r2
 80008c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	e00b      	b.n	80008e0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008cc:	f043 0220 	orr.w	r2, r3, #32
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d8:	f043 0201 	orr.w	r2, r3, #1
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	430a      	orrs	r2, r1
 80008f2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	689a      	ldr	r2, [r3, #8]
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <HAL_ADC_Init+0x1a8>)
 80008fc:	4013      	ands	r3, r2
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	68b9      	ldr	r1, [r7, #8]
 8000904:	430b      	orrs	r3, r1
 8000906:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000910:	d003      	beq.n	800091a <HAL_ADC_Init+0x126>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d104      	bne.n	8000924 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	691b      	ldr	r3, [r3, #16]
 800091e:	3b01      	subs	r3, #1
 8000920:	051b      	lsls	r3, r3, #20
 8000922:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	430a      	orrs	r2, r1
 8000936:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <HAL_ADC_Init+0x1ac>)
 8000940:	4013      	ands	r3, r2
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	429a      	cmp	r2, r3
 8000946:	d10b      	bne.n	8000960 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000952:	f023 0303 	bic.w	r3, r3, #3
 8000956:	f043 0201 	orr.w	r2, r3, #1
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800095e:	e018      	b.n	8000992 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000964:	f023 0312 	bic.w	r3, r3, #18
 8000968:	f043 0210 	orr.w	r2, r3, #16
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000974:	f043 0201 	orr.w	r2, r3, #1
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800097c:	2301      	movs	r3, #1
 800097e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000980:	e007      	b.n	8000992 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000986:	f043 0210 	orr.w	r2, r3, #16
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000992:	7dfb      	ldrb	r3, [r7, #23]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	ffe1f7fd 	.word	0xffe1f7fd
 80009a0:	ff1f0efe 	.word	0xff1f0efe

080009a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d101      	bne.n	80009c4 <HAL_ADC_ConfigChannel+0x20>
 80009c0:	2302      	movs	r3, #2
 80009c2:	e0dc      	b.n	8000b7e <HAL_ADC_ConfigChannel+0x1da>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2201      	movs	r2, #1
 80009c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2b06      	cmp	r3, #6
 80009d2:	d81c      	bhi.n	8000a0e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685a      	ldr	r2, [r3, #4]
 80009de:	4613      	mov	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	3b05      	subs	r3, #5
 80009e6:	221f      	movs	r2, #31
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	4019      	ands	r1, r3
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	4613      	mov	r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	3b05      	subs	r3, #5
 8000a00:	fa00 f203 	lsl.w	r2, r0, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a0c:	e03c      	b.n	8000a88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	2b0c      	cmp	r3, #12
 8000a14:	d81c      	bhi.n	8000a50 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	4613      	mov	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4413      	add	r3, r2
 8000a26:	3b23      	subs	r3, #35	@ 0x23
 8000a28:	221f      	movs	r2, #31
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	4019      	ands	r1, r3
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	6818      	ldr	r0, [r3, #0]
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685a      	ldr	r2, [r3, #4]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	4413      	add	r3, r2
 8000a40:	3b23      	subs	r3, #35	@ 0x23
 8000a42:	fa00 f203 	lsl.w	r2, r0, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a4e:	e01b      	b.n	8000a88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685a      	ldr	r2, [r3, #4]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4413      	add	r3, r2
 8000a60:	3b41      	subs	r3, #65	@ 0x41
 8000a62:	221f      	movs	r2, #31
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	4019      	ands	r1, r3
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	3b41      	subs	r3, #65	@ 0x41
 8000a7c:	fa00 f203 	lsl.w	r2, r0, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	430a      	orrs	r2, r1
 8000a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b09      	cmp	r3, #9
 8000a8e:	d91c      	bls.n	8000aca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	68d9      	ldr	r1, [r3, #12]
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	3b1e      	subs	r3, #30
 8000aa2:	2207      	movs	r2, #7
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	4019      	ands	r1, r3
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	4413      	add	r3, r2
 8000aba:	3b1e      	subs	r3, #30
 8000abc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	e019      	b.n	8000afe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	6919      	ldr	r1, [r3, #16]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	2207      	movs	r2, #7
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	4019      	ands	r1, r3
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	6898      	ldr	r0, [r3, #8]
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	fa00 f203 	lsl.w	r2, r0, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	430a      	orrs	r2, r1
 8000afc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b10      	cmp	r3, #16
 8000b04:	d003      	beq.n	8000b0e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b0a:	2b11      	cmp	r3, #17
 8000b0c:	d132      	bne.n	8000b74 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a1d      	ldr	r2, [pc, #116]	@ (8000b88 <HAL_ADC_ConfigChannel+0x1e4>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d125      	bne.n	8000b64 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d126      	bne.n	8000b74 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	689a      	ldr	r2, [r3, #8]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b34:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b10      	cmp	r3, #16
 8000b3c:	d11a      	bne.n	8000b74 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b3e:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <HAL_ADC_ConfigChannel+0x1e8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a13      	ldr	r2, [pc, #76]	@ (8000b90 <HAL_ADC_ConfigChannel+0x1ec>)
 8000b44:	fba2 2303 	umull	r2, r3, r2, r3
 8000b48:	0c9a      	lsrs	r2, r3, #18
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b54:	e002      	b.n	8000b5c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1f9      	bne.n	8000b56 <HAL_ADC_ConfigChannel+0x1b2>
 8000b62:	e007      	b.n	8000b74 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b68:	f043 0220 	orr.w	r2, r3, #32
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	40012400 	.word	0x40012400
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	431bde83 	.word	0x431bde83

08000b94 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d12e      	bne.n	8000c0c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 0201 	bic.w	r2, r2, #1
 8000bbc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000bbe:	f7ff fdeb 	bl	8000798 <HAL_GetTick>
 8000bc2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000bc4:	e01b      	b.n	8000bfe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000bc6:	f7ff fde7 	bl	8000798 <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d914      	bls.n	8000bfe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d10d      	bne.n	8000bfe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000be6:	f043 0210 	orr.w	r2, r3, #16
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf2:	f043 0201 	orr.w	r2, r3, #1
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e007      	b.n	8000c0e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d0dc      	beq.n	8000bc6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	@ (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	@ (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	@ 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	@ 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cfc:	d301      	bcc.n	8000d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00f      	b.n	8000d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <SysTick_Config+0x40>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d10:	f7ff ff90 	bl	8000c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <SysTick_Config+0x40>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <SysTick_Config+0x40>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d42:	f7ff ff69 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	68b9      	ldr	r1, [r7, #8]
 8000d4c:	6978      	ldr	r0, [r7, #20]
 8000d4e:	f7ff ff9b 	bl	8000c88 <NVIC_EncodePriority>
 8000d52:	4602      	mov	r2, r0
 8000d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff6a 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d60:	bf00      	nop
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ffbb 	bl	8000cec <SysTick_Config>
 8000d76:	4603      	mov	r3, r0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b08b      	sub	sp, #44	@ 0x2c
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d92:	e169      	b.n	8001068 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d94:	2201      	movs	r2, #1
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 8158 	bne.w	8001062 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	4a9a      	ldr	r2, [pc, #616]	@ (8001020 <HAL_GPIO_Init+0x2a0>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d05e      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dbc:	4a98      	ldr	r2, [pc, #608]	@ (8001020 <HAL_GPIO_Init+0x2a0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d875      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dc2:	4a98      	ldr	r2, [pc, #608]	@ (8001024 <HAL_GPIO_Init+0x2a4>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d058      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dc8:	4a96      	ldr	r2, [pc, #600]	@ (8001024 <HAL_GPIO_Init+0x2a4>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d86f      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dce:	4a96      	ldr	r2, [pc, #600]	@ (8001028 <HAL_GPIO_Init+0x2a8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d052      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dd4:	4a94      	ldr	r2, [pc, #592]	@ (8001028 <HAL_GPIO_Init+0x2a8>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d869      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dda:	4a94      	ldr	r2, [pc, #592]	@ (800102c <HAL_GPIO_Init+0x2ac>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d04c      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000de0:	4a92      	ldr	r2, [pc, #584]	@ (800102c <HAL_GPIO_Init+0x2ac>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d863      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000de6:	4a92      	ldr	r2, [pc, #584]	@ (8001030 <HAL_GPIO_Init+0x2b0>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d046      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dec:	4a90      	ldr	r2, [pc, #576]	@ (8001030 <HAL_GPIO_Init+0x2b0>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d85d      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000df2:	2b12      	cmp	r3, #18
 8000df4:	d82a      	bhi.n	8000e4c <HAL_GPIO_Init+0xcc>
 8000df6:	2b12      	cmp	r3, #18
 8000df8:	d859      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8000e00 <HAL_GPIO_Init+0x80>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e7b 	.word	0x08000e7b
 8000e04:	08000e55 	.word	0x08000e55
 8000e08:	08000e67 	.word	0x08000e67
 8000e0c:	08000ea9 	.word	0x08000ea9
 8000e10:	08000eaf 	.word	0x08000eaf
 8000e14:	08000eaf 	.word	0x08000eaf
 8000e18:	08000eaf 	.word	0x08000eaf
 8000e1c:	08000eaf 	.word	0x08000eaf
 8000e20:	08000eaf 	.word	0x08000eaf
 8000e24:	08000eaf 	.word	0x08000eaf
 8000e28:	08000eaf 	.word	0x08000eaf
 8000e2c:	08000eaf 	.word	0x08000eaf
 8000e30:	08000eaf 	.word	0x08000eaf
 8000e34:	08000eaf 	.word	0x08000eaf
 8000e38:	08000eaf 	.word	0x08000eaf
 8000e3c:	08000eaf 	.word	0x08000eaf
 8000e40:	08000eaf 	.word	0x08000eaf
 8000e44:	08000e5d 	.word	0x08000e5d
 8000e48:	08000e71 	.word	0x08000e71
 8000e4c:	4a79      	ldr	r2, [pc, #484]	@ (8001034 <HAL_GPIO_Init+0x2b4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d013      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e52:	e02c      	b.n	8000eae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	623b      	str	r3, [r7, #32]
          break;
 8000e5a:	e029      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	3304      	adds	r3, #4
 8000e62:	623b      	str	r3, [r7, #32]
          break;
 8000e64:	e024      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	3308      	adds	r3, #8
 8000e6c:	623b      	str	r3, [r7, #32]
          break;
 8000e6e:	e01f      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	330c      	adds	r3, #12
 8000e76:	623b      	str	r3, [r7, #32]
          break;
 8000e78:	e01a      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e82:	2304      	movs	r3, #4
 8000e84:	623b      	str	r3, [r7, #32]
          break;
 8000e86:	e013      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d105      	bne.n	8000e9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e90:	2308      	movs	r3, #8
 8000e92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	611a      	str	r2, [r3, #16]
          break;
 8000e9a:	e009      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	615a      	str	r2, [r3, #20]
          break;
 8000ea6:	e003      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
          break;
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          break;
 8000eae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2bff      	cmp	r3, #255	@ 0xff
 8000eb4:	d801      	bhi.n	8000eba <HAL_GPIO_Init+0x13a>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	e001      	b.n	8000ebe <HAL_GPIO_Init+0x13e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2bff      	cmp	r3, #255	@ 0xff
 8000ec4:	d802      	bhi.n	8000ecc <HAL_GPIO_Init+0x14c>
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	e002      	b.n	8000ed2 <HAL_GPIO_Init+0x152>
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ece:	3b08      	subs	r3, #8
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	210f      	movs	r1, #15
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	6a39      	ldr	r1, [r7, #32]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	431a      	orrs	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 80b1 	beq.w	8001062 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f00:	4b4d      	ldr	r3, [pc, #308]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a4c      	ldr	r2, [pc, #304]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f18:	4a48      	ldr	r2, [pc, #288]	@ (800103c <HAL_GPIO_Init+0x2bc>)
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a40      	ldr	r2, [pc, #256]	@ (8001040 <HAL_GPIO_Init+0x2c0>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d013      	beq.n	8000f6c <HAL_GPIO_Init+0x1ec>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a3f      	ldr	r2, [pc, #252]	@ (8001044 <HAL_GPIO_Init+0x2c4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d00d      	beq.n	8000f68 <HAL_GPIO_Init+0x1e8>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001048 <HAL_GPIO_Init+0x2c8>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d007      	beq.n	8000f64 <HAL_GPIO_Init+0x1e4>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a3d      	ldr	r2, [pc, #244]	@ (800104c <HAL_GPIO_Init+0x2cc>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d101      	bne.n	8000f60 <HAL_GPIO_Init+0x1e0>
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e006      	b.n	8000f6e <HAL_GPIO_Init+0x1ee>
 8000f60:	2304      	movs	r3, #4
 8000f62:	e004      	b.n	8000f6e <HAL_GPIO_Init+0x1ee>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e002      	b.n	8000f6e <HAL_GPIO_Init+0x1ee>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <HAL_GPIO_Init+0x1ee>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f70:	f002 0203 	and.w	r2, r2, #3
 8000f74:	0092      	lsls	r2, r2, #2
 8000f76:	4093      	lsls	r3, r2
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f7e:	492f      	ldr	r1, [pc, #188]	@ (800103c <HAL_GPIO_Init+0x2bc>)
 8000f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d006      	beq.n	8000fa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f98:	4b2d      	ldr	r3, [pc, #180]	@ (8001050 <HAL_GPIO_Init+0x2d0>)
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	492c      	ldr	r1, [pc, #176]	@ (8001050 <HAL_GPIO_Init+0x2d0>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	608b      	str	r3, [r1, #8]
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	4928      	ldr	r1, [pc, #160]	@ (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d006      	beq.n	8000fce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fc0:	4b23      	ldr	r3, [pc, #140]	@ (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	4922      	ldr	r1, [pc, #136]	@ (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	60cb      	str	r3, [r1, #12]
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fce:	4b20      	ldr	r3, [pc, #128]	@ (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	491e      	ldr	r1, [pc, #120]	@ (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d006      	beq.n	8000ff6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fe8:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	4918      	ldr	r1, [pc, #96]	@ (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	604b      	str	r3, [r1, #4]
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <HAL_GPIO_Init+0x2d0>)
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	4914      	ldr	r1, [pc, #80]	@ (8001050 <HAL_GPIO_Init+0x2d0>)
 8001000:	4013      	ands	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d021      	beq.n	8001054 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001010:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <HAL_GPIO_Init+0x2d0>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	490e      	ldr	r1, [pc, #56]	@ (8001050 <HAL_GPIO_Init+0x2d0>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	600b      	str	r3, [r1, #0]
 800101c:	e021      	b.n	8001062 <HAL_GPIO_Init+0x2e2>
 800101e:	bf00      	nop
 8001020:	10320000 	.word	0x10320000
 8001024:	10310000 	.word	0x10310000
 8001028:	10220000 	.word	0x10220000
 800102c:	10210000 	.word	0x10210000
 8001030:	10120000 	.word	0x10120000
 8001034:	10110000 	.word	0x10110000
 8001038:	40021000 	.word	0x40021000
 800103c:	40010000 	.word	0x40010000
 8001040:	40010800 	.word	0x40010800
 8001044:	40010c00 	.word	0x40010c00
 8001048:	40011000 	.word	0x40011000
 800104c:	40011400 	.word	0x40011400
 8001050:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <HAL_GPIO_Init+0x304>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	43db      	mvns	r3, r3
 800105c:	4909      	ldr	r1, [pc, #36]	@ (8001084 <HAL_GPIO_Init+0x304>)
 800105e:	4013      	ands	r3, r2
 8001060:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001064:	3301      	adds	r3, #1
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106e:	fa22 f303 	lsr.w	r3, r2, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	f47f ae8e 	bne.w	8000d94 <HAL_GPIO_Init+0x14>
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	372c      	adds	r7, #44	@ 0x2c
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	40010400 	.word	0x40010400

08001088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e12b      	b.n	80012f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d106      	bne.n	80010b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fa50 	bl	8000554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2224      	movs	r2, #36	@ 0x24
 80010b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0201 	bic.w	r2, r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010ec:	f000 fd82 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 80010f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4a81      	ldr	r2, [pc, #516]	@ (80012fc <HAL_I2C_Init+0x274>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d807      	bhi.n	800110c <HAL_I2C_Init+0x84>
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4a80      	ldr	r2, [pc, #512]	@ (8001300 <HAL_I2C_Init+0x278>)
 8001100:	4293      	cmp	r3, r2
 8001102:	bf94      	ite	ls
 8001104:	2301      	movls	r3, #1
 8001106:	2300      	movhi	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	e006      	b.n	800111a <HAL_I2C_Init+0x92>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a7d      	ldr	r2, [pc, #500]	@ (8001304 <HAL_I2C_Init+0x27c>)
 8001110:	4293      	cmp	r3, r2
 8001112:	bf94      	ite	ls
 8001114:	2301      	movls	r3, #1
 8001116:	2300      	movhi	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e0e7      	b.n	80012f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4a78      	ldr	r2, [pc, #480]	@ (8001308 <HAL_I2C_Init+0x280>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	0c9b      	lsrs	r3, r3, #18
 800112c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	430a      	orrs	r2, r1
 8001140:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4a6a      	ldr	r2, [pc, #424]	@ (80012fc <HAL_I2C_Init+0x274>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d802      	bhi.n	800115c <HAL_I2C_Init+0xd4>
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	3301      	adds	r3, #1
 800115a:	e009      	b.n	8001170 <HAL_I2C_Init+0xe8>
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	4a69      	ldr	r2, [pc, #420]	@ (800130c <HAL_I2C_Init+0x284>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	099b      	lsrs	r3, r3, #6
 800116e:	3301      	adds	r3, #1
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	430b      	orrs	r3, r1
 8001176:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001182:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	495c      	ldr	r1, [pc, #368]	@ (80012fc <HAL_I2C_Init+0x274>)
 800118c:	428b      	cmp	r3, r1
 800118e:	d819      	bhi.n	80011c4 <HAL_I2C_Init+0x13c>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	1e59      	subs	r1, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	fbb1 f3f3 	udiv	r3, r1, r3
 800119e:	1c59      	adds	r1, r3, #1
 80011a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80011a4:	400b      	ands	r3, r1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00a      	beq.n	80011c0 <HAL_I2C_Init+0x138>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1e59      	subs	r1, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011b8:	3301      	adds	r3, #1
 80011ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011be:	e051      	b.n	8001264 <HAL_I2C_Init+0x1dc>
 80011c0:	2304      	movs	r3, #4
 80011c2:	e04f      	b.n	8001264 <HAL_I2C_Init+0x1dc>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d111      	bne.n	80011f0 <HAL_I2C_Init+0x168>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	1e58      	subs	r0, r3, #1
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6859      	ldr	r1, [r3, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	440b      	add	r3, r1
 80011da:	fbb0 f3f3 	udiv	r3, r0, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bf0c      	ite	eq
 80011e8:	2301      	moveq	r3, #1
 80011ea:	2300      	movne	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	e012      	b.n	8001216 <HAL_I2C_Init+0x18e>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	1e58      	subs	r0, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6859      	ldr	r1, [r3, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	0099      	lsls	r1, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	fbb0 f3f3 	udiv	r3, r0, r3
 8001206:	3301      	adds	r3, #1
 8001208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf0c      	ite	eq
 8001210:	2301      	moveq	r3, #1
 8001212:	2300      	movne	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_I2C_Init+0x196>
 800121a:	2301      	movs	r3, #1
 800121c:	e022      	b.n	8001264 <HAL_I2C_Init+0x1dc>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10e      	bne.n	8001244 <HAL_I2C_Init+0x1bc>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1e58      	subs	r0, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6859      	ldr	r1, [r3, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	440b      	add	r3, r1
 8001234:	fbb0 f3f3 	udiv	r3, r0, r3
 8001238:	3301      	adds	r3, #1
 800123a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800123e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001242:	e00f      	b.n	8001264 <HAL_I2C_Init+0x1dc>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	1e58      	subs	r0, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6859      	ldr	r1, [r3, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	0099      	lsls	r1, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	fbb0 f3f3 	udiv	r3, r0, r3
 800125a:	3301      	adds	r3, #1
 800125c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001260:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	6809      	ldr	r1, [r1, #0]
 8001268:	4313      	orrs	r3, r2
 800126a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69da      	ldr	r2, [r3, #28]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001292:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6911      	ldr	r1, [r2, #16]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68d2      	ldr	r2, [r2, #12]
 800129e:	4311      	orrs	r1, r2
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	430b      	orrs	r3, r1
 80012a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2220      	movs	r2, #32
 80012de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	000186a0 	.word	0x000186a0
 8001300:	001e847f 	.word	0x001e847f
 8001304:	003d08ff 	.word	0x003d08ff
 8001308:	431bde83 	.word	0x431bde83
 800130c:	10624dd3 	.word	0x10624dd3

08001310 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	461a      	mov	r2, r3
 800131c:	460b      	mov	r3, r1
 800131e:	817b      	strh	r3, [r7, #10]
 8001320:	4613      	mov	r3, r2
 8001322:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b20      	cmp	r3, #32
 8001332:	f040 8089 	bne.w	8001448 <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001336:	4b47      	ldr	r3, [pc, #284]	@ (8001454 <HAL_I2C_Master_Receive_IT+0x144>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	08db      	lsrs	r3, r3, #3
 800133c:	4a46      	ldr	r2, [pc, #280]	@ (8001458 <HAL_I2C_Master_Receive_IT+0x148>)
 800133e:	fba2 2303 	umull	r2, r3, r2, r3
 8001342:	0a1a      	lsrs	r2, r3, #8
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	009a      	lsls	r2, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3b01      	subs	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d112      	bne.n	8001382 <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2220      	movs	r2, #32
 8001366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f043 0220 	orr.w	r2, r3, #32
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800137e:	2302      	movs	r3, #2
 8001380:	e063      	b.n	800144a <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b02      	cmp	r3, #2
 800138e:	d0df      	beq.n	8001350 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <HAL_I2C_Master_Receive_IT+0x8e>
 800139a:	2302      	movs	r3, #2
 800139c:	e055      	b.n	800144a <HAL_I2C_Master_Receive_IT+0x13a>
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d007      	beq.n	80013c4 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0201 	orr.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2222      	movs	r2, #34	@ 0x22
 80013d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2210      	movs	r2, #16
 80013e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	893a      	ldrh	r2, [r7, #8]
 80013f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4a16      	ldr	r2, [pc, #88]	@ (800145c <HAL_I2C_Master_Receive_IT+0x14c>)
 8001404:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001406:	897a      	ldrh	r2, [r7, #10]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	645a      	str	r2, [r3, #68]	@ 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001422:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001432:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001442:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	e000      	b.n	800144a <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8001448:	2302      	movs	r3, #2
  }
}
 800144a:	4618      	mov	r0, r3
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000000 	.word	0x20000000
 8001458:	14f8b589 	.word	0x14f8b589
 800145c:	ffff0000 	.word	0xffff0000

08001460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e272      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8087 	beq.w	800158e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001480:	4b92      	ldr	r3, [pc, #584]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b04      	cmp	r3, #4
 800148a:	d00c      	beq.n	80014a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800148c:	4b8f      	ldr	r3, [pc, #572]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b08      	cmp	r3, #8
 8001496:	d112      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
 8001498:	4b8c      	ldr	r3, [pc, #560]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a4:	d10b      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	4b89      	ldr	r3, [pc, #548]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d06c      	beq.n	800158c <HAL_RCC_OscConfig+0x12c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d168      	bne.n	800158c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e24c      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c6:	d106      	bne.n	80014d6 <HAL_RCC_OscConfig+0x76>
 80014c8:	4b80      	ldr	r3, [pc, #512]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a7f      	ldr	r2, [pc, #508]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e02e      	b.n	8001534 <HAL_RCC_OscConfig+0xd4>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x98>
 80014de:	4b7b      	ldr	r3, [pc, #492]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a7a      	ldr	r2, [pc, #488]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b78      	ldr	r3, [pc, #480]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a77      	ldr	r2, [pc, #476]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e01d      	b.n	8001534 <HAL_RCC_OscConfig+0xd4>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0xbc>
 8001502:	4b72      	ldr	r3, [pc, #456]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a71      	ldr	r2, [pc, #452]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b6f      	ldr	r3, [pc, #444]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a6e      	ldr	r2, [pc, #440]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e00b      	b.n	8001534 <HAL_RCC_OscConfig+0xd4>
 800151c:	4b6b      	ldr	r3, [pc, #428]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a6a      	ldr	r2, [pc, #424]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b68      	ldr	r3, [pc, #416]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a67      	ldr	r2, [pc, #412]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001532:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff f92c 	bl	8000798 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff f928 	bl	8000798 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	@ 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e200      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	4b5d      	ldr	r3, [pc, #372]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0xe4>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff f918 	bl	8000798 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff f914 	bl	8000798 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	@ 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e1ec      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	4b53      	ldr	r3, [pc, #332]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x10c>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d063      	beq.n	8001662 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800159a:	4b4c      	ldr	r3, [pc, #304]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015a6:	4b49      	ldr	r3, [pc, #292]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d11c      	bne.n	80015ec <HAL_RCC_OscConfig+0x18c>
 80015b2:	4b46      	ldr	r3, [pc, #280]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d116      	bne.n	80015ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	4b43      	ldr	r3, [pc, #268]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_RCC_OscConfig+0x176>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e1c0      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	4b3d      	ldr	r3, [pc, #244]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4939      	ldr	r1, [pc, #228]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	e03a      	b.n	8001662 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d020      	beq.n	8001636 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f4:	4b36      	ldr	r3, [pc, #216]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff f8cd 	bl	8000798 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff f8c9 	bl	8000798 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e1a1      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b2a      	ldr	r3, [pc, #168]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4927      	ldr	r1, [pc, #156]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001630:	4313      	orrs	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
 8001634:	e015      	b.n	8001662 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001636:	4b26      	ldr	r3, [pc, #152]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff f8ac 	bl	8000798 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff f8a8 	bl	8000798 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e180      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d03a      	beq.n	80016e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d019      	beq.n	80016aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001676:	4b17      	ldr	r3, [pc, #92]	@ (80016d4 <HAL_RCC_OscConfig+0x274>)
 8001678:	2201      	movs	r2, #1
 800167a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167c:	f7ff f88c 	bl	8000798 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001684:	f7ff f888 	bl	8000798 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e160      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f000 faba 	bl	8001c1c <RCC_Delay>
 80016a8:	e01c      	b.n	80016e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <HAL_RCC_OscConfig+0x274>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff f872 	bl	8000798 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b6:	e00f      	b.n	80016d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff f86e 	bl	8000798 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d908      	bls.n	80016d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e146      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	42420000 	.word	0x42420000
 80016d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d8:	4b92      	ldr	r3, [pc, #584]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80016da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1e9      	bne.n	80016b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80a6 	beq.w	800183e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10d      	bne.n	800171e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b88      	ldr	r3, [pc, #544]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a87      	ldr	r2, [pc, #540]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b85      	ldr	r3, [pc, #532]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171a:	2301      	movs	r3, #1
 800171c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	4b82      	ldr	r3, [pc, #520]	@ (8001928 <HAL_RCC_OscConfig+0x4c8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d118      	bne.n	800175c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172a:	4b7f      	ldr	r3, [pc, #508]	@ (8001928 <HAL_RCC_OscConfig+0x4c8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a7e      	ldr	r2, [pc, #504]	@ (8001928 <HAL_RCC_OscConfig+0x4c8>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001736:	f7ff f82f 	bl	8000798 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173e:	f7ff f82b 	bl	8000798 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b64      	cmp	r3, #100	@ 0x64
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e103      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001750:	4b75      	ldr	r3, [pc, #468]	@ (8001928 <HAL_RCC_OscConfig+0x4c8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x312>
 8001764:	4b6f      	ldr	r3, [pc, #444]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4a6e      	ldr	r2, [pc, #440]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6213      	str	r3, [r2, #32]
 8001770:	e02d      	b.n	80017ce <HAL_RCC_OscConfig+0x36e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x334>
 800177a:	4b6a      	ldr	r3, [pc, #424]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a69      	ldr	r2, [pc, #420]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	6213      	str	r3, [r2, #32]
 8001786:	4b67      	ldr	r3, [pc, #412]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4a66      	ldr	r2, [pc, #408]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	f023 0304 	bic.w	r3, r3, #4
 8001790:	6213      	str	r3, [r2, #32]
 8001792:	e01c      	b.n	80017ce <HAL_RCC_OscConfig+0x36e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b05      	cmp	r3, #5
 800179a:	d10c      	bne.n	80017b6 <HAL_RCC_OscConfig+0x356>
 800179c:	4b61      	ldr	r3, [pc, #388]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4a60      	ldr	r2, [pc, #384]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	6213      	str	r3, [r2, #32]
 80017a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6213      	str	r3, [r2, #32]
 80017b4:	e00b      	b.n	80017ce <HAL_RCC_OscConfig+0x36e>
 80017b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	4b58      	ldr	r3, [pc, #352]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4a57      	ldr	r2, [pc, #348]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d015      	beq.n	8001802 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7fe ffdf 	bl	8000798 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7fe ffdb 	bl	8000798 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e0b1      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0ee      	beq.n	80017de <HAL_RCC_OscConfig+0x37e>
 8001800:	e014      	b.n	800182c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7fe ffc9 	bl	8000798 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001808:	e00a      	b.n	8001820 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180a:	f7fe ffc5 	bl	8000798 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001818:	4293      	cmp	r3, r2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e09b      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001820:	4b40      	ldr	r3, [pc, #256]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1ee      	bne.n	800180a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d105      	bne.n	800183e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001832:	4b3c      	ldr	r3, [pc, #240]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a3b      	ldr	r2, [pc, #236]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800183c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8087 	beq.w	8001956 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001848:	4b36      	ldr	r3, [pc, #216]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	d061      	beq.n	8001918 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d146      	bne.n	80018ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185c:	4b33      	ldr	r3, [pc, #204]	@ (800192c <HAL_RCC_OscConfig+0x4cc>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7fe ff99 	bl	8000798 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186a:	f7fe ff95 	bl	8000798 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e06d      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187c:	4b29      	ldr	r3, [pc, #164]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f0      	bne.n	800186a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001890:	d108      	bne.n	80018a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001892:	4b24      	ldr	r3, [pc, #144]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	4921      	ldr	r1, [pc, #132]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a19      	ldr	r1, [r3, #32]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b4:	430b      	orrs	r3, r1
 80018b6:	491b      	ldr	r1, [pc, #108]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018bc:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <HAL_RCC_OscConfig+0x4cc>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7fe ff69 	bl	8000798 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ca:	f7fe ff65 	bl	8000798 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e03d      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x46a>
 80018e8:	e035      	b.n	8001956 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <HAL_RCC_OscConfig+0x4cc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7fe ff52 	bl	8000798 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f8:	f7fe ff4e 	bl	8000798 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e026      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x498>
 8001916:	e01e      	b.n	8001956 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d107      	bne.n	8001930 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e019      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
 8001924:	40021000 	.word	0x40021000
 8001928:	40007000 	.word	0x40007000
 800192c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_RCC_OscConfig+0x500>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	429a      	cmp	r2, r3
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d001      	beq.n	8001956 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40021000 	.word	0x40021000

08001964 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0d0      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001978:	4b6a      	ldr	r3, [pc, #424]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d910      	bls.n	80019a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b67      	ldr	r3, [pc, #412]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 0207 	bic.w	r2, r3, #7
 800198e:	4965      	ldr	r1, [pc, #404]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	4b63      	ldr	r3, [pc, #396]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0b8      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d020      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c0:	4b59      	ldr	r3, [pc, #356]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	4a58      	ldr	r2, [pc, #352]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d8:	4b53      	ldr	r3, [pc, #332]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a52      	ldr	r2, [pc, #328]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80019e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e4:	4b50      	ldr	r3, [pc, #320]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	494d      	ldr	r1, [pc, #308]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d040      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b47      	ldr	r3, [pc, #284]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d115      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e07f      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a22:	4b41      	ldr	r3, [pc, #260]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e073      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a32:	4b3d      	ldr	r3, [pc, #244]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e06b      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a42:	4b39      	ldr	r3, [pc, #228]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f023 0203 	bic.w	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4936      	ldr	r1, [pc, #216]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a54:	f7fe fea0 	bl	8000798 <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5c:	f7fe fe9c 	bl	8000798 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e053      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 020c 	and.w	r2, r3, #12
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d1eb      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a84:	4b27      	ldr	r3, [pc, #156]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d210      	bcs.n	8001ab4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b24      	ldr	r3, [pc, #144]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 0207 	bic.w	r2, r3, #7
 8001a9a:	4922      	ldr	r1, [pc, #136]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e032      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d008      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac0:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4916      	ldr	r1, [pc, #88]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d009      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ade:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	490e      	ldr	r1, [pc, #56]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001af2:	f000 f821 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8001af6:	4602      	mov	r2, r0
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	490a      	ldr	r1, [pc, #40]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c8>)
 8001b04:	5ccb      	ldrb	r3, [r1, r3]
 8001b06:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0a:	4a09      	ldr	r2, [pc, #36]	@ (8001b30 <HAL_RCC_ClockConfig+0x1cc>)
 8001b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_RCC_ClockConfig+0x1d0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fdfe 	bl	8000714 <HAL_InitTick>

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40022000 	.word	0x40022000
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	08001f3c 	.word	0x08001f3c
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b52:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x94>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d002      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0x30>
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d003      	beq.n	8001b6e <HAL_RCC_GetSysClockFreq+0x36>
 8001b66:	e027      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b68:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b6a:	613b      	str	r3, [r7, #16]
      break;
 8001b6c:	e027      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	0c9b      	lsrs	r3, r3, #18
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	4a17      	ldr	r2, [pc, #92]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b78:	5cd3      	ldrb	r3, [r2, r3]
 8001b7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d010      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x94>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	0c5b      	lsrs	r3, r3, #17
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	4a11      	ldr	r2, [pc, #68]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b92:	5cd3      	ldrb	r3, [r2, r3]
 8001b94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b9a:	fb03 f202 	mul.w	r2, r3, r2
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e004      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a0c      	ldr	r2, [pc, #48]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bac:	fb02 f303 	mul.w	r3, r2, r3
 8001bb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	613b      	str	r3, [r7, #16]
      break;
 8001bb6:	e002      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bba:	613b      	str	r3, [r7, #16]
      break;
 8001bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bbe:	693b      	ldr	r3, [r7, #16]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	007a1200 	.word	0x007a1200
 8001bd4:	08001f54 	.word	0x08001f54
 8001bd8:	08001f64 	.word	0x08001f64
 8001bdc:	003d0900 	.word	0x003d0900

08001be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be4:	4b02      	ldr	r3, [pc, #8]	@ (8001bf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	20000000 	.word	0x20000000

08001bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bf8:	f7ff fff2 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	4903      	ldr	r1, [pc, #12]	@ (8001c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000
 8001c18:	08001f4c 	.word	0x08001f4c

08001c1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c24:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <RCC_Delay+0x34>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <RCC_Delay+0x38>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	0a5b      	lsrs	r3, r3, #9
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c38:	bf00      	nop
  }
  while (Delay --);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1e5a      	subs	r2, r3, #1
 8001c3e:	60fa      	str	r2, [r7, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1f9      	bne.n	8001c38 <RCC_Delay+0x1c>
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	20000000 	.word	0x20000000
 8001c54:	10624dd3 	.word	0x10624dd3

08001c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d07d      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c78:	4b4f      	ldr	r3, [pc, #316]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10d      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c84:	4b4c      	ldr	r3, [pc, #304]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	4a4b      	ldr	r2, [pc, #300]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	61d3      	str	r3, [r2, #28]
 8001c90:	4b49      	ldr	r3, [pc, #292]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca0:	4b46      	ldr	r3, [pc, #280]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d118      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cac:	4b43      	ldr	r3, [pc, #268]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a42      	ldr	r2, [pc, #264]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb8:	f7fe fd6e 	bl	8000798 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc0:	f7fe fd6a 	bl	8000798 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	@ 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e06d      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cde:	4b36      	ldr	r3, [pc, #216]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ce6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d02e      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d027      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d06:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d12:	4a29      	ldr	r2, [pc, #164]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d014      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7fe fd39 	bl	8000798 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7fe fd35 	bl	8000798 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e036      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d40:	4b1d      	ldr	r3, [pc, #116]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0ee      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4917      	ldr	r1, [pc, #92]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d64:	4b14      	ldr	r3, [pc, #80]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	4a13      	ldr	r2, [pc, #76]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d008      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	490b      	ldr	r1, [pc, #44]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d008      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d9a:	4b07      	ldr	r3, [pc, #28]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	4904      	ldr	r1, [pc, #16]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40007000 	.word	0x40007000
 8001dc0:	42420440 	.word	0x42420440

08001dc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e076      	b.n	8001ec4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d108      	bne.n	8001df0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001de6:	d009      	beq.n	8001dfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
 8001dee:	e005      	b.n	8001dfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe fbda 	bl	80005d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e80:	ea42 0103 	orr.w	r1, r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	0c1a      	lsrs	r2, r3, #16
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f002 0204 	and.w	r2, r2, #4
 8001ea2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <memset>:
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4402      	add	r2, r0
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d100      	bne.n	8001ed6 <memset+0xa>
 8001ed4:	4770      	bx	lr
 8001ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8001eda:	e7f9      	b.n	8001ed0 <memset+0x4>

08001edc <__libc_init_array>:
 8001edc:	b570      	push	{r4, r5, r6, lr}
 8001ede:	2600      	movs	r6, #0
 8001ee0:	4d0c      	ldr	r5, [pc, #48]	@ (8001f14 <__libc_init_array+0x38>)
 8001ee2:	4c0d      	ldr	r4, [pc, #52]	@ (8001f18 <__libc_init_array+0x3c>)
 8001ee4:	1b64      	subs	r4, r4, r5
 8001ee6:	10a4      	asrs	r4, r4, #2
 8001ee8:	42a6      	cmp	r6, r4
 8001eea:	d109      	bne.n	8001f00 <__libc_init_array+0x24>
 8001eec:	f000 f81a 	bl	8001f24 <_init>
 8001ef0:	2600      	movs	r6, #0
 8001ef2:	4d0a      	ldr	r5, [pc, #40]	@ (8001f1c <__libc_init_array+0x40>)
 8001ef4:	4c0a      	ldr	r4, [pc, #40]	@ (8001f20 <__libc_init_array+0x44>)
 8001ef6:	1b64      	subs	r4, r4, r5
 8001ef8:	10a4      	asrs	r4, r4, #2
 8001efa:	42a6      	cmp	r6, r4
 8001efc:	d105      	bne.n	8001f0a <__libc_init_array+0x2e>
 8001efe:	bd70      	pop	{r4, r5, r6, pc}
 8001f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f04:	4798      	blx	r3
 8001f06:	3601      	adds	r6, #1
 8001f08:	e7ee      	b.n	8001ee8 <__libc_init_array+0xc>
 8001f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f0e:	4798      	blx	r3
 8001f10:	3601      	adds	r6, #1
 8001f12:	e7f2      	b.n	8001efa <__libc_init_array+0x1e>
 8001f14:	08001f68 	.word	0x08001f68
 8001f18:	08001f68 	.word	0x08001f68
 8001f1c:	08001f68 	.word	0x08001f68
 8001f20:	08001f6c 	.word	0x08001f6c

08001f24 <_init>:
 8001f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f26:	bf00      	nop
 8001f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f2a:	bc08      	pop	{r3}
 8001f2c:	469e      	mov	lr, r3
 8001f2e:	4770      	bx	lr

08001f30 <_fini>:
 8001f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f32:	bf00      	nop
 8001f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f36:	bc08      	pop	{r3}
 8001f38:	469e      	mov	lr, r3
 8001f3a:	4770      	bx	lr
